#!/usr/bin/env python3

import os
import argparse
import json

parser = argparse.ArgumentParser(description="Record a list of notes")
nr = parser.add_mutually_exclusive_group()
nr.add_argument("-n", "--new", action="store_true", help="add new item to todo list")
nr.add_argument( "-r", "--remove", type=int, help="remove item from todo list")
args = parser.parse_args()

config = "todo.json"
# Use XDG base directories
try:
    config_dir = f"{os.environ['XDG_CONFIG_HOME']}/mnimi"
except KeyError:
    config_dir = f"{os.environ['HOME']}/.config/mnimi"

# Ensure configuration directory exists
try:
    os.mkdir(f"{config_dir}")
except FileExistsError:
    pass

todo_list = []
try:
    with open(f"{config_dir}/{config}", "r") as f:
        todo_list = json.load(f)
except FileNotFoundError:
    with open(f"{config_dir}/{config}", "w") as f:
        json.dump([], f)

if args.new:
    item = {}
    item["note"] = input("Note text: ")
    if not item["note"]:
        print("No note string entered. Exiting.")
    else:
        item["expiry"] = input("Expiry date (YYYY-MM-DD) (optional): ")
        todo_list.append(item)
        with open(f"{config_dir}/{config}", "w") as f:
            json.dump(todo_list, f)

elif args.remove != None:
    try:
        todo_list.pop(args.remove)
        print(f"Removed note {args.remove}")
        with open(f"{config_dir}/{config}", "w") as f:
            json.dump(todo_list, f)
    except IndexError:
        print("No such note. Exiting.")

else:
    if len(todo_list) == 0:
        print("No items in list")
    else:
        for i in range(0, len(todo_list)):
            print(f"{i}) {todo_list[i]['note']} ({todo_list[i]['expiry']})")
