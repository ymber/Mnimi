#!/usr/bin/env python3

import os
import argparse
import json
import re

list_file = "todo.json"
# Use XDG base directories
try:
    data_dir = f"{os.environ['XDG_DATA_HOME']}/mnimi"
except KeyError:
    data_dir = f"{os.environ['HOME']}/.local/share/mnimi"

todo_list = []


def setup_directories():
    # Ensure data directory exists
    try:
        os.mkdir(f"{data_dir}")
    except FileExistsError:
        pass


def load_list():
    try:
        with open(f"{data_dir}/{list_file}", "r") as f:
            global todo_list
            todo_list = json.load(f)
        return 1
    except FileNotFoundError:
        if input("No list file found. Create empty list? [Y/n] ") != "n":
            with open(f"{data_dir}/{list_file}", "w") as f:
                json.dump([], f)
            return 1
        else:
            return 0


def check_date_format(date):
    r = re.compile("^\d{4}-\d{2}-\d{2}$")
    if r.match(date) != None:
        return 1
    else:
        return 0


def new_item():
    item = {}
    note = input("Note text: ")
    if not note:
        print("No note string entered. Exiting.")
        return
    else:
        item["note"] = note

    expiry = input("Expiry date (YYYY-MM-DD) (optional): ")
    if check_date_format(expiry) != 1 and expiry != "":
        print("Invalid date format. Blank date recorded.")
        item["expiry"] = ""
    else:
        item["expiry"] = expiry

    item["extend"] = input("Extended note (optional): ")
    todo_list.append(item)
    with open(f"{data_dir}/{list_file}", "w") as f:
        json.dump(todo_list, f)


def remove_item(item):
    try:
        todo_list.pop(item)
        print(f"Removed note {item}")
        with open(f"{data_dir}/{list_file}", "w") as f:
            json.dump(todo_list, f)
    except IndexError:
        print("No such note. Exiting.")


def amend_item(item):
    try:
        print(f"Current note: {todo_list[item]['note']}")
        note = input("New note text (leave blank to keep current note): ")
        if not note:
            print("Note unchanged.")
        else:
            todo_list[item]["note"] = note

        print(f"Current expiry date: {todo_list[item]['expiry']}")
        expiry = input("New expiry date (YYYY-MM-DD) (leave blank to keep current expiry date): ")
        if not expiry:
            print("Expiry date unchanged")
        elif check_date_format(expiry) != 1:
            print("Invalid date format. Recorded date unchanged.")
        else:
            todo_list[item]["expiry"] = expiry

        print(f"Current extended note: {todo_list[item]['extend']}")
        extend = input("New extended note (leave blank to keep current extended note): ")
        if not extend:
            print("Extended note unchanged.")
        else:
            todo_list[item]["extend"] = extend

        with open(f"{data_dir}/{list_file}", "w") as f:
            json.dump(todo_list, f)

    except IndexError:
        print("No such note. Exiting.")


def print_item(item, extend):
    try:
        if extend:
            print(
                f"{item}) {todo_list[item]['note']} ({todo_list[item]['expiry']})"
            )
            if f"{todo_list[item]['extend']}" != "":
                print(f"{todo_list[item]['extend']}")
        else:
            print(
                f"{item}) {todo_list[item]['note']} ({todo_list[item]['expiry']})"
            )
    except IndexError:
        print("No such note. Exiting.")


def print_list(extend):
    if len(todo_list) == 0:
        print("No items in list.")
    else:
        for i in range(0, len(todo_list)):
            if extend:
                print_item(i, True)
            else:
                print_item(i, False)


def setup_args():
    parser = argparse.ArgumentParser(description="Record a list of notes")
    opts = parser.add_mutually_exclusive_group()
    opts.add_argument(
        "-n", "--new", action="store_true", help="add new item to todo list")
    opts.add_argument(
        "-r", "--remove", type=int, help="remove item from todo list")
    opts.add_argument("-a", "--amend", type=int, help="amend an existing note")
    opts.add_argument(
        "-e",
        "--extended",
        nargs="?",
        type=int,
        const=-1,
        help="show extended notes for all entries or only the specified entry")
    return parser.parse_args()


def main():
    args = setup_args()
    setup_directories()
    if not load_list():
        print("List unavailable. Exiting.")
        return

    if args.new:
        new_item()

    elif args.remove != None:
        remove_item(args.remove)

    elif args.amend != None:
        amend_item(args.amend)

    else:
        if args.extended == None:
            print_list(False)
        elif args.extended < 0:
            print_list(True)
        elif args.extended >= 0:
            print_item(args.extended, True)


if __name__ == "__main__":
    main()
